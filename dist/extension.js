(()=>{"use strict";var e={496:e=>{e.exports=require("vscode")},81:e=>{e.exports=require("child_process")},147:e=>{e.exports=require("fs")},37:e=>{e.exports=require("os")}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.deactivate=e.activate=void 0;const t=r(81),o=r(496),i=r(147),a=["update","select","insert","into","delete","from","where"];function s(e){return a.filter((t=>e.toLowerCase().includes(t))).length>=2}e.activate=function(e){console.log('Congratulations, your extension "go-inline-pgformatter" is now active!');let n=o.commands.registerCommand("go-inline-pgformatter.formatAllSql",(()=>{const e=r(37).homedir(),n=o.workspace.getConfiguration("goPgFormat"),a=n.get("pgFormatPath"),c=n.inspect("pgFormatPath")?.defaultValue;var l;l=c===a?`${e}${c}`:`${a}`,(async()=>await async function(e){try{return await i.promises.access(e),!0}catch{return!1}}(`${l}`))().then((function(e){if(!e)return o.window.showErrorMessage(`Path to pg_format does not exist:\n${l}`),new Promise((function(){return!0}));const{activeTextEditor:r}=o.window;if(r&&"go"===r.document.languageId){const e=new o.WorkspaceEdit,w=n.get("matchSpacing"),x=n.get("keywordCase"),h=n.get("addTabs");var i=0;"number"==typeof h&&(i=h);const{document:v}=r;var a=null,c=null,u=0,p="",f=Array(),g=Array();for(let e=0;e<v.lineCount;e++){const t=v.lineAt(e);let r=t.text.indexOf("`"),n=t.text.lastIndexOf("`");if(r>=0){if(null===a){a=t,r!==n&&(c=t);continue}c=t}if(null!==a&&null!==c){let e=new o.Position(a.lineNumber,a.text.indexOf("`")+1),t=new o.Position(c.lineNumber,c.text.lastIndexOf("`")),r=new o.Range(e,t),n=v.getText(r);s(n)&&(u+=1,p+=n.replace(/\$/g,"\\$").replace(/;$/,"")+";\n-- go-inline-pgformatter-splitmark\n",f.push(r),g.push(a)),a=null,c=null}}var d=(0,t.execSync)(`echo "${p}" | perl ${l} --keyword-case ${x} --type-case ${x}`),m=0;return d.toString().split(/\n\s*-- go-inline-pgformatter-splitmark\n/).forEach((t=>{let r=t.replace(/^[\s\n\r]+|[\s\n\r]+$/,"");if(""!==r){if(w){let e=g[m].firstNonWhitespaceCharacterIndex,t=g[m].text.slice(0,e)+"\t".repeat(i);r=t+r.replace(/\n/g,"\n"+t)}r="\n"+r,e.replace(v.uri,f[m],r),m+=1}})),o.window.setStatusBarMessage(`Successfully formatted ${u} pgSQL strings in-line!`),o.workspace.applyEdit(e)}})).catch((function(e){return o.window.showErrorMessage(`go-inline-pgformatter error: ${e}`),new Promise((function(){return!1}))}))}));e.subscriptions.push(n)},e.deactivate=function(){}})(),module.exports=n})();