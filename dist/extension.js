(()=>{"use strict";var e={496:e=>{e.exports=require("vscode")},81:e=>{e.exports=require("child_process")},147:e=>{e.exports=require("fs")},37:e=>{e.exports=require("os")},598:e=>{e.exports=JSON.parse('{"name":"go-inline-pgformatter","displayName":"Go Inline-pgFormatter","description":"Formats postgres SQL code found in strings in a .go file","version":"1.0.2","publisher":"passioinc","galleryBanner":{"theme":"dark","color":"#555555"},"icon":"logo.png","author":{"name":"Alex Branton"},"engines":{"vscode":"^1.54.0"},"categories":["Programming Languages","Formatters","Other"],"keywords":["pgsql","go","golang","string","inline","postgres","PostgreSQL","SQL","Formatting"],"license":"MIT","homepage":"https://github.com/Passiolife/go-inline-pgformatter","repository":{"type":"git","url":"https://github.com/Passiolife/go-inline-pgformatter"},"activationEvents":["onCommand:go-inline-pgformatter.formatAllSql"],"main":"./dist/extension.js","contributes":{"commands":[{"command":"go-inline-pgformatter.formatAllSql","title":"Go - Inline Format pgSQL Strings"}],"configuration":{"title":"Go inline-pgFormatter","properties":{"goPgFormat.pgFormatPath":{"type":"string","description":"path to pg_format perl script"},"goPgFormat.matchSpacing":{"type":"boolean","default":true,"description":"try to match indentation-level of the assigned variable name"},"goPgFormat.addTabs":{"type":"number","default":1,"description":"after matching the variable indentation, add this many more tabs (disabled if matching is off)"},"goPgFormat.keywordCase":{"type":"string","default":"changes allpgSql keywords to UPPERCASE","enum":["leaves all pgSql keywords in the casing they are currently in","changes allpgSql keywords to lowercase","changes allpgSql keywords to UPPERCASE","changes allpgSql keywords to Capitalized"]}}}},"scripts":{"vscode:prepublish":"npm run package","compile":"webpack","watch":"webpack --watch","package":"webpack --mode production --devtool hidden-source-map","compile-tests":"tsc -p . --outDir out","watch-tests":"tsc -p . -w --outDir out","pretest":"npm run compile-tests && npm run compile && npm run lint","lint":"eslint src --ext ts","test":"node ./out/test/runTest.js"},"devDependencies":{"@types/vscode":"^1.54.0","@types/glob":"^7.2.0","@types/mocha":"^9.1.0","@types/node":"14.x","@typescript-eslint/eslint-plugin":"^5.16.0","@typescript-eslint/parser":"^5.16.0","eslint":"^8.11.0","glob":"^7.2.0","mocha":"^9.2.2","typescript":"^4.5.5","ts-loader":"^9.2.8","webpack":"^5.70.0","webpack-cli":"^4.9.2","@vscode/test-electron":"^2.1.3"}}')}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,o),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.deactivate=e.activate=void 0;const t=o(81),r=o(496),i=o(147),a=["update","select","insert","into","delete","from","where"],s=["leaves all pgSql keywords in the casing they are currently in","changes allpgSql keywords to lowercase","changes allpgSql keywords to UPPERCASE","changes allpgSql keywords to Capitalized"];function l(e){return a.filter((t=>e.toLowerCase().includes(t))).length>=2}e.activate=function(e){console.log('Congratulations, your extension "go-inline-pgformatter" is now active!');let n=r.commands.registerCommand("go-inline-pgformatter.formatAllSql",(()=>{const e=o(37).homedir(),n=r.workspace.getConfiguration("goPgFormat"),a=n.get("pgFormatPath"),p=o(598);var c;c=""==`${a}`?`${e}/.vscode/extensions/passioinc.go-inline-pgformatter-${p.version}/pg_format`:`${a}`,(async()=>await async function(e){try{return await i.promises.access(e),!0}catch{return!1}}(`${c}`))().then((function(e){if(!e)return r.window.showErrorMessage(`Path to pg_format does not exist:\n${c}`),new Promise((function(){return!0}));const{activeTextEditor:o}=r.window;if(o&&"go"===o.document.languageId){const e=new r.WorkspaceEdit,w=n.get("matchSpacing"),y=n.get("keywordCase"),v=n.get("addTabs");var i=0;"number"==typeof v&&(i=v);const{document:x}=o;var a=null,p=null,g=0,d="",m=Array(),u=Array();for(let e=0;e<x.lineCount;e++){const t=x.lineAt(e);let o=t.text.indexOf("`"),n=t.text.lastIndexOf("`");if(o>=0){if(null===a){a=t,o!==n&&(p=t);continue}p=t}if(null!==a&&null!==p){let e=new r.Position(a.lineNumber,a.text.indexOf("`")+1),t=new r.Position(p.lineNumber,p.text.lastIndexOf("`")),o=new r.Range(e,t),n=x.getText(o);l(n)&&(g+=1,d+=n.replace(/\$/g,"\\$").replace(/\%/g,"xxpggo").replace(/;$/,"")+";\n-- go-inline-pgformatter-splitmark\n",m.push(o),u.push(a)),a=null,p=null}}let S=s.indexOf(`${y}`);var f=(0,t.execSync)(`echo "${d}" | perl ${c} --keyword-case ${S} --type-case ${S}`),h=0;return f.toString().split(/\n\s*-- go-inline-pgformatter-splitmark\n/).forEach((t=>{let o=t.replace(/^[\s\n\r]+|[\s\n\r]+$/,"").replace(/xxpggo/g,"%");if(""!==o){if(w){let e=u[h].firstNonWhitespaceCharacterIndex,t=u[h].text.slice(0,e)+"\t".repeat(i);o=t+o.replace(/\n/g,"\n"+t)}o="\n"+o,e.replace(x.uri,m[h],o),h+=1}})),r.window.setStatusBarMessage(`Successfully formatted ${g} pgSQL strings in-line!`),r.workspace.applyEdit(e)}})).catch((function(e){return r.window.showErrorMessage(`go-inline-pgformatter error: ${e}`),new Promise((function(){return!1}))}))}));e.subscriptions.push(n)},e.deactivate=function(){}})(),module.exports=n})();